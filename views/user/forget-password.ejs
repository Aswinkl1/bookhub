<%-include('../../views/partials/user/_header')%>



<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        
        .container1 {
            max-width: 500px;
            margin-top: 50px;
            margin-left: 400px;
        }
        .otp-form, .password-form {
            display: none;
        }
        .timer {
            font-weight: bold;
            color: #dc3545;
        }
        .password-requirements {
            font-size: 0.85rem;
            color: #6c757d;
        }
        .password-requirement {
            margin-bottom: 5px;
        }
        .valid-requirement {
            color: #198754;
        }
        .password-toggle {
            cursor: pointer;
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }
    </style>
</head>
<body>
    <div class="container1">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Forgot Password</h3>
            </div>
            <div class="card-body">
                <!-- Email Form -->
                <form id="emailForm">
                    <div class="mb-3">
                        <label for="email" class="form-label">Email address</label>
                        <input type="email" class="form-control" id="email" placeholder="Enter your email">
                        <div class="invalid-feedback" id="emailError"></div>
                        <div class="form-text">We'll send a verification code to this email.</div>
                    </div>
                    <button type="submit" class="btn btn-primary w-100" id="sendOtpBtn">
                        <span class="spinner-border spinner-border-sm d-none" id="emailSpinner" role="status" aria-hidden="true"></span>
                        Send Verification Code
                    </button>
                </form>

                <!-- OTP Form (Hidden initially) -->
                <form id="otpForm" class="otp-form">
                    <div class="text-center mb-4">
                        <h5>Enter Verification Code</h5>
                        <p>We've sent a code to <span id="emailDisplay"></span></p>
                        <p>Time remaining: <span class="timer" id="timer">05:00</span></p>
                    </div>
                    
                    <div class="mb-4">
                        <label for="otpInput" class="form-label">Verification Code</label>
                        <input type="text" class="form-control form-control-lg text-center" id="otpInput" 
                               placeholder="Enter 6-digit code" maxlength="6" autocomplete="off">
                        <div class="invalid-feedback" id="otpInputError"></div>
                    </div>
                    
                    <div class="text-center mb-3" id="otpError"></div>
                    
                    <button type="submit" class="btn btn-primary w-100 mb-3" id="verifyOtpBtn">
                        <span class="spinner-border spinner-border-sm d-none" id="otpSpinner" role="status" aria-hidden="true"></span>
                        Verify Code
                    </button>
                    
                    <div class="text-center">
                        <button type="button" class="btn btn-link" id="resendBtn">Resend Code</button>
                    </div>
                </form>

                <!-- Password Reset Form (Hidden initially) -->
                <form id="passwordForm" class="password-form">
                    <h5 class="mb-4 text-center">Create New Password</h5>
                    
                    <div class="mb-3 position-relative">
                        <label for="newPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="newPassword" placeholder="Enter new password">
                        <i class="password-toggle bi bi-eye" id="togglePassword">üëÅÔ∏è</i>
                        <div class="invalid-feedback" id="newPasswordError"></div>
                    </div>
                    
                    <div class="mb-4 password-requirements" id="passwordRequirements">
                        <div class="password-requirement" id="lengthRequirement">‚Ä¢ At least 8 characters</div>
                        <div class="password-requirement" id="upperRequirement">‚Ä¢ At least one uppercase letter</div>
                        <div class="password-requirement" id="lowerRequirement">‚Ä¢ At least one lowercase letter</div>
                        <div class="password-requirement" id="numberRequirement">‚Ä¢ At least one number</div>
                        <div class="password-requirement" id="specialRequirement">‚Ä¢ At least one special character</div>
                    </div>
                    
                    <div class="mb-4 position-relative">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm your password">
                        <i class="password-toggle bi bi-eye" id="toggleConfirmPassword">üëÅÔ∏è</i>
                        <div class="invalid-feedback" id="confirmPasswordError"></div>
                    </div>
                    
                    <button type="submit" class="btn btn-primary w-100" id="resetPasswordBtn">
                        <span class="spinner-border spinner-border-sm d-none" id="passwordSpinner" role="status" aria-hidden="true"></span>
                        Reset Password
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements - Email Form
            const emailForm = document.getElementById('emailForm');
            const emailInput = document.getElementById('email');
            const emailError = document.getElementById('emailError');
            const sendOtpBtn = document.getElementById('sendOtpBtn');
            const emailSpinner = document.getElementById('emailSpinner');
            
            // DOM Elements - OTP Form
            const otpForm = document.getElementById('otpForm');
            const emailDisplay = document.getElementById('emailDisplay');
            const timerElement = document.getElementById('timer');
            const otpInput = document.getElementById('otpInput');
            const otpInputError = document.getElementById('otpInputError');
            const otpError = document.getElementById('otpError');
            const verifyOtpBtn = document.getElementById('verifyOtpBtn');
            const resendBtn = document.getElementById('resendBtn');
            const otpSpinner = document.getElementById('otpSpinner');
            
            // DOM Elements - Password Form
            const passwordForm = document.getElementById('passwordForm');
            const newPassword = document.getElementById('newPassword');
            const confirmPassword = document.getElementById('confirmPassword');
            const newPasswordError = document.getElementById('newPasswordError');
            const confirmPasswordError = document.getElementById('confirmPasswordError');
            const resetPasswordBtn = document.getElementById('resetPasswordBtn');
            const passwordSpinner = document.getElementById('passwordSpinner');
            const togglePassword = document.getElementById('togglePassword');
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            
            // Password requirement elements
            const lengthRequirement = document.getElementById('lengthRequirement');
            const upperRequirement = document.getElementById('upperRequirement');
            const lowerRequirement = document.getElementById('lowerRequirement');
            const numberRequirement = document.getElementById('numberRequirement');
            const specialRequirement = document.getElementById('specialRequirement');
            
            // Variables
            let timerInterval;
            let timeRemaining = 300; // 5 minutes in seconds
            
            // Email validation regex
            const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            
            // Password validation regex
            const lengthRegex = /.{8,}/;
            const upperRegex = /[A-Z]/;
            const lowerRegex = /[a-z]/;
            const numberRegex = /[0-9]/;
            const specialRegex = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/;
            
            // Format time as MM:SS
            function formatTime(seconds) {
                const mins = Math.floor(seconds / 60);
                const secs = seconds % 60;
                return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
            
            // Start timer
            function startTimer() {
                clearInterval(timerInterval);
                timeRemaining = 300;
                timerElement.textContent = formatTime(timeRemaining);
                
                timerInterval = setInterval(() => {
                    timeRemaining--;
                    timerElement.textContent = formatTime(timeRemaining);
                    
                    if (timeRemaining <= 0) {
                        clearInterval(timerInterval);
                        disableOtpForm();
                    }
                }, 1000);
            }
            
            // Disable OTP form when timer expires
            function disableOtpForm() {
                otpInput.disabled = true;
                verifyOtpBtn.disabled = true;
                otpError.textContent = "Verification code expired. Please request a new code.";
                otpError.classList.add('text-danger');
            }
            
            // Enable OTP form
            function enableOtpForm() {
                otpInput.disabled = false;
                otpInput.value = '';
                verifyOtpBtn.disabled = false;
                otpError.textContent = "";
                otpError.classList.remove('text-danger', 'text-success');
                otpInputError.textContent = "";
                otpInput.classList.remove('is-invalid');
            }
            
            // Update password requirement validation UI
            function updatePasswordRequirements() {
                const password = newPassword.value;
                
                // Check each requirement
                if (lengthRegex.test(password)) {
                    lengthRequirement.classList.add('valid-requirement');
                } else {
                    lengthRequirement.classList.remove('valid-requirement');
                }
                
                if (upperRegex.test(password)) {
                    upperRequirement.classList.add('valid-requirement');
                } else {
                    upperRequirement.classList.remove('valid-requirement');
                }
                
                if (lowerRegex.test(password)) {
                    lowerRequirement.classList.add('valid-requirement');
                } else {
                    lowerRequirement.classList.remove('valid-requirement');
                }
                
                if (numberRegex.test(password)) {
                    numberRequirement.classList.add('valid-requirement');
                } else {
                    numberRequirement.classList.remove('valid-requirement');
                }
                
                if (specialRegex.test(password)) {
                    specialRequirement.classList.add('valid-requirement');
                } else {
                    specialRequirement.classList.remove('valid-requirement');
                }
            }
            
            // Validate password
            function validatePassword() {
                const password = newPassword.value;
                let isValid = true;
                
                if (!lengthRegex.test(password)) {
                    isValid = false;
                }
                
                if (!upperRegex.test(password)) {
                    isValid = false;
                }
                
                if (!lowerRegex.test(password)) {
                    isValid = false;
                }
                
                if (!numberRegex.test(password)) {
                    isValid = false;
                }
                
                if (!specialRegex.test(password)) {
                    isValid = false;
                }
                
                return isValid;
            }
            
            // Handle email form submission
            emailForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const email = emailInput.value.trim();
                
                // Validate email
                if (!email) {
                    emailInput.classList.add('is-invalid');
                    emailError.textContent = 'Email is required';
                    return;
                }
                
                if (!emailRegex.test(email)) {
                    emailInput.classList.add('is-invalid');
                    emailError.textContent = 'Please enter a valid email address';
                    return;
                }
                
                // Clear errors
                emailInput.classList.remove('is-invalid');
                emailError.textContent = '';
                
                // Show loading spinner
                emailSpinner.classList.remove('d-none');
                sendOtpBtn.disabled = true;
                
                // Simulate API call
                setTimeout(async() => {
                    console.log("fkl");
                    
                    const response = await fetch("/verify-email-for-forgetPassword",{
                        method:"PATCH",
                        headers:{"Content-Type":"application/json"},
                        body:JSON.stringify({email})
                    })

                    const jsonResponse = await response.json()
                    if(response.ok){
                        console.log("jf")
                        emailForm.style.display = 'none';
                        otpForm.style.display = 'block';
                    
                    // Display email
                    emailDisplay.textContent = email;
                    
                    // Start timer
                    startTimer();
                    
                    // Enable OTP form
                    enableOtpForm();
                    
                    // Hide spinner
                    emailSpinner.classList.add('d-none');
                    sendOtpBtn.disabled = false;
                    }
                    else{
                        console.log("djkl")
                        alert("coudnt send email ")
                        location.reload()
                    }


                    // Hide email form and show OTP form
                    
                }, 1500);
            });
            
            // Allow only numbers in OTP input
            otpInput.addEventListener('input', function(e) {
                this.value = this.value.replace(/[^0-9]/g, '');
            });
            
            // Handle OTP form submission
            otpForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const otp = otpInput.value.trim();
                
                // Validate OTP
                if (!otp) {
                    otpInput.classList.add('is-invalid');
                    otpInputError.textContent = 'Please enter verification code';
                    return;
                }
                
                if (otp.length !== 6) {
                    otpInput.classList.add('is-invalid');
                    otpInputError.textContent = 'Please enter all 6 digits';
                    return;
                }
                
                // Clear validation errors
                otpInput.classList.remove('is-invalid');
                otpInputError.textContent = '';
                
                // Show loading spinner
                otpSpinner.classList.remove('d-none');
                verifyOtpBtn.disabled = true;
                
                // Simulate API verification
                setTimeout(async() => {
                    const response = await fetch("/forgetPassword-verfy-otp",{
                        method:"PATCH",
                        headers:{"Content-Type":"application/json"},
                        body:JSON.stringify({otp})
                    })

                    const jsonResponse = await response.json()
                    if(response.ok){
                        // Hide spinner
                    otpSpinner.classList.add('d-none');
                    verifyOtpBtn.disabled = false;
                    
                    // Hide OTP form and show password form
                    otpForm.style.display = 'none';
                    passwordForm.style.display = 'block';
                    
                    // Stop timer
                    clearInterval(timerInterval);
                    }else{
                        otpSpinner.classList.add('d-none');
                        verifyOtpBtn.disabled = false;
                        alert("error")
                        
                    }
                    
                    
                }, 1500);
            });
            
            // Handle resend code
            resendBtn.addEventListener('click', function() {
                // Show loading spinner
                emailSpinner.classList.remove('d-none');
                resendBtn.disabled = true;
                
                // Simulate API call
                setTimeout(() => {
                    // Reset and start timer
                    startTimer();
                    
                    // Enable OTP form
                    enableOtpForm();
                    
                    // Hide spinner
                    emailSpinner.classList.add('d-none');
                    resendBtn.disabled = false;
                    
                    // Show success message
                    otpError.textContent = 'A new verification code has been sent';
                    otpError.classList.add('text-success');
                    
                    // Clear success message after 3 seconds
                    setTimeout(() => {
                        otpError.textContent = '';
                        otpError.classList.remove('text-success');
                    }, 3000);
                }, 1500);
            });
            
            // Password toggle visibility
            togglePassword.addEventListener('click', function() {
                if (newPassword.type === 'password') {
                    newPassword.type = 'text';
                    this.textContent = 'üëÅÔ∏è‚Äçüó®Ô∏è';
                } else {
                    newPassword.type = 'password';
                    this.textContent = 'üëÅÔ∏è';
                }
            });
            
            toggleConfirmPassword.addEventListener('click', function() {
                if (confirmPassword.type === 'password') {
                    confirmPassword.type = 'text';
                    this.textContent = 'üëÅÔ∏è‚Äçüó®Ô∏è';
                } else {
                    confirmPassword.type = 'password';
                    this.textContent = 'üëÅÔ∏è';
                }
            });
            
            // Live password validation
            newPassword.addEventListener('input', updatePasswordRequirements);
            
            // Confirm password validation
            confirmPassword.addEventListener('input', function() {
                if (this.value !== newPassword.value) {
                    confirmPassword.classList.add('is-invalid');
                    confirmPasswordError.textContent = 'Passwords do not match';
                } else {
                    confirmPassword.classList.remove('is-invalid');
                    confirmPasswordError.textContent = '';
                }
            });
            
            // Handle password form submission
            passwordForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const password = newPassword.value;
                const confirmPwd = confirmPassword.value;
                let hasError = false;
                
                // Validate password
                if (!validatePassword()) {
                    newPassword.classList.add('is-invalid');
                    newPasswordError.textContent = 'Password does not meet requirements';
                    hasError = true;
                } else {
                    newPassword.classList.remove('is-invalid');
                    newPasswordError.textContent = '';
                }
                
                // Validate confirm password
                if (password !== confirmPwd) {
                    confirmPassword.classList.add('is-invalid');
                    confirmPasswordError.textContent = 'Passwords do not match';
                    hasError = true;
                } else {
                    confirmPassword.classList.remove('is-invalid');
                    confirmPasswordError.textContent = '';
                }
                
                if (hasError) {
                    return;
                }
                
                // Show loading spinner
                passwordSpinner.classList.remove('d-none');
                resetPasswordBtn.disabled = true;
                
                // Simulate API call
                setTimeout(async() => {
                    // Hide spinner
                    const response = await fetch("/forgetPassword-passwordChange",{
                        method:"PATCH",
                        headers:{'Content-Type':"application/json"},
                        body:JSON.stringify({password})
                    })

                    const jsonResponse = await response.json()
                    if(response.ok){
                        passwordSpinner.classList.add('d-none');
                        
                        // Show success message
                        passwordForm.innerHTML = `
                            <div class="text-center">
                                <div class="mb-4 text-success">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-check-circle" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                        <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                    </svg>
                                </div>
                                <h4>Password Reset Successful!</h4>
                                <p class="mb-4">Your password has been reset successfully.</p>
                                <a href="/login" class="btn btn-primary">Login Now</a>
                            </div>
                        `;


                    }else{
                        alert(jsonResponse.message)
                        location.reload()
                    }
                    
                }, 1500);
            });
        });
    </script>
</body>


<%-include('../../views/partials/user/_footer')%>
